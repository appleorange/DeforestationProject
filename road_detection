/**
 * Function to mask clouds using the Sentinel-2 QA band
 * @param {ee.Image} image Sentinel-2 image
 * @return {ee.Image} cloud masked Sentinel-2 image
 */
function maskS2clouds(image) {
  var qa = image.select('QA60');

  // Bits 10 and 11 are clouds and cirrus, respectively.
  var cloudBitMask = 1 << 10;
  var cirrusBitMask = 1 << 11;

  // Both flags should be set to zero, indicating clear conditions.
  var mask = qa.bitwiseAnd(cloudBitMask).eq(0)
      .and(qa.bitwiseAnd(cirrusBitMask).eq(0));

  return image.updateMask(mask).divide(10000);
}

var dataset = ee.ImageCollection('COPERNICUS/S2_SR_HARMONIZED')
                  .filterDate('2020-05-01', '2020-08-30')
                  // Pre-filter to get less cloudy granules.
                  .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE',5))
                  .map(maskS2clouds);

var visualization = {
  min: 0.0,
  max: 0.3,
  bands: ['B4', 'B3', 'B2'],
};

var xinguIndigenousPark = ee.Geometry.Polygon([ [-53.077, -10.132], [-53.077, -12.219], [-51.283, -12.219], [-51.283, -10.132] ]);
//var roi = ee.Geometry.Polygon( [-69, 1.232, -50, 1.243, -50, -7, -69, -7]);
//Map.setCenter(roi);

Map.centerObject(xinguIndigenousPark,9);
//Map.setCenter(-49.6, -3.787, 12);

var image = dataset.mean();
Map.addLayer(image, visualization, 'RGB_COPERNICUS_longer_period');


// Apply a median filter to smooth the image
var smooth = image ;//image.focal_median();

// Compute the Canny edges
var edges = ee.Algorithms.CannyEdgeDetector({
  image: smooth,
  threshold: 50,
  sigma: 1
});

// Compute the Hough transform to detect lines
var lines = ee.Algorithms.HoughTransform(edges, 256, 10, 100);

// Display the edges and lines on a map
Map.addLayer(smooth, {min: 0, max: 300}, 'Smooth');
Map.addLayer(edges, {min: 0, max: 1}, 'Edges');
Map.addLayer(lines, {}, 'Lines');
    
//     var aoi = 
//     /* color: #98ff00 */
//     /* displayProperties: [
//       {
//         "type": "rectangle"
//       }
//     ] */
//     ee.Geometry.Polygon(
//         [[[-50.590258343318474, -12.056229945836618],
//           [-50.590258343318474, -12.072371345793437],
//           [-50.54433892498351, -12.072371345793437],
//           [-50.54433892498351, -12.056229945836618]]], null, false);


// function maskS2clouds(image) {
//   var qa = image.select('QA60');

//   // Bits 10 and 11 are clouds and cirrus, respectively.
//   var cloudBitMask = 1 << 10;
//   var cirrusBitMask = 1 << 11;

//   // Both flags should be set to zero, indicating clear conditions.
//   var mask = qa.bitwiseAnd(cloudBitMask).eq(0)
//       .and(qa.bitwiseAnd(cirrusBitMask).eq(0));

//   return image.updateMask(mask).divide(10000);
// }

// var dataset = ee.ImageCollection('COPERNICUS/S2_SR_HARMONIZED')
//                   .filterDate('2020-05-01', '2020-08-30')
//                   // Pre-filter to get less cloudy granules.
//                   .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE',5))
//                   .map(maskS2clouds);

// var image = dataset.first().clip(aoi);    
// print(image);
// // Load the image and clip to the AOI
// //var image = ee.Image('USGS/SRTMGL1_003').clip(aoi);

// // Apply a median filter to smooth the image
// var smooth = image.focal_median();

// // Compute the Canny edges
// var edges = ee.Algorithms.CannyEdgeDetector({
//   image: smooth,
//   threshold: 50,
//   sigma: 1
// });

// // Compute the Hough transform to detect lines
// var lines = ee.Algorithms.HoughTransform(edges, 256, 10, 100);

// var visualization = {
//   min: 0.0,
//   max: 0.3,
//   bands: ['B4', 'B3', 'B2'],
// };
// // Display the edges and lines on a map
// Map.centerObject(aoi, 13);
// Map.addLayer(image, visualization, 'aero');
// Map.addLayer(smooth, {min: 0, max: 300}, 'Smooth');
// Map.addLayer(edges, {min: 0, max: 1}, 'Edges');
// Map.addLayer(lines, {}, 'Lines');

// // // var roads = ee.FeatureCollection('projects/mapbiomas-workspace/public/collection7/mapbiomas_collection60_amazonia_legal_road_sr');
// // // Map.addLayer(roads, {}, 'Legal Amazonia Roads');
// // // var legalAmazonRoads = ee.FeatureCollection('projects/mapbiomas-workspace/public/collection6/mapbiomas_collection60_amazonia_legal_road_sr');
// // // Map.addLayer(legalAmazonRoads, {}, 'Legal Amazon Roads');
// // var landsat8 = ee.ImageCollection('LANDSAT/LC08/C01/T1').filterDate('2017-01-01', '2017-01-31').select(['QA60']);

// // print(landsat8);

// // var roads = landsat8.select('QA60').gt(0).extract('roads');

// // //roads = roads.validate('OpenStreetMap/roads');

// // ee.map.show(roads);

// //print(roads);

// // var legalAmazonRoads = ee.FeatureCollection('users/mapbiomas/mapbiomas_amazonia_legal_road_sr');
// // Map.addLayer(legalAmazonRoads, {}, 'Legal Amazon Roads');


// // // Load Sentinel-2 imagery and filter by date and region of interest
// // var roi = ee.Geometry.Polygon( [-69, 1.232, -50, 1.243, -50, -7, -69, -7]);

// // var s2 = ee.ImageCollection('COPERNICUS/S2_SR')
// //   .filterDate('2020-01-01', '2021-12-31')
// //   .filterBounds(roi);

// // // Define function to calculate NDVI
// // var calculateNDVI = function(image) {
// //   var ndvi = image.normalizedDifference(['B8', 'B4']).rename('ndvi');
// //   return image.addBands(ndvi);
// // };

// // // Map the calculateNDVI function over the image collection
// // var s2NDVI = s2.map(calculateNDVI);

// // // Define function to calculate the distance to nearest road
// // var calculateDistance = function(image) {
// //   // Load OpenStreetMap roads dataset and clip to region of interest
// //   var roads = ee.FeatureCollection('OpenStreetMap/roads')
// //     .filterBounds(roi)
// //     .geometry();

// //   // Calculate distance to nearest road using Euclidean distance transform
// //   var distance = ee.Image(0).byte().paint(roads, 1)
// //     .fastDistanceTransform().sqrt()
// //     .rename('distance');

// //   return image.addBands(distance);
// // };

// // // Map the calculateDistance function over the image collection
// // var s2NDVIDistance = s2NDVI.map(calculateDistance);

// // // Define threshold for NDVI and distance to identify new roads
// // var ndviThreshold = 0.2;
// // var distanceThreshold = 100;

// // // Define function to classify new roads
// // var classifyNewRoads = function(image) {
// //   // Create binary mask based on NDVI threshold
// //   var ndviMask = image.select('ndvi').gt(ndviThreshold);

// //   // Create binary mask based on distance threshold
// //   var distanceMask = image.select('distance').lt(distanceThreshold);

// //   // Combine masks to create final classification
// //   var newRoads = ndviMask.and(distanceMask).rename('new_roads');

// //   return image.addBands(newRoads);
// // };

// // // Map the classifyNewRoads function over the image collection
// // var s2NDVIDistanceNewRoads = s2NDVIDistance.map(classifyNewRoads);

// // // Select the final classification band and display on the map
// // var newRoads = s2NDVIDistanceNewRoads.select('new_roads');
// // Map.setCenter(-49.6, -3.787, 12);
// // Map.addLayer(newRoads, {min: 0, max: 1, palette: ['white', 'red']}, 'New Roads');

